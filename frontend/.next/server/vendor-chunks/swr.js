"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swr";
exports.ids = ["vendor-chunks/swr"];
exports.modules = {

/***/ "(ssr)/./node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ noop),\n/* harmony export */   B: () => (/* binding */ isPromiseLike),\n/* harmony export */   I: () => (/* binding */ IS_REACT_LEGACY),\n/* harmony export */   O: () => (/* binding */ OBJECT),\n/* harmony export */   S: () => (/* binding */ SWRConfigContext),\n/* harmony export */   U: () => (/* binding */ UNDEFINED),\n/* harmony export */   a: () => (/* binding */ isFunction),\n/* harmony export */   b: () => (/* binding */ SWRGlobalState),\n/* harmony export */   c: () => (/* binding */ cache),\n/* harmony export */   d: () => (/* binding */ defaultConfig),\n/* harmony export */   e: () => (/* binding */ isUndefined),\n/* harmony export */   f: () => (/* binding */ mergeConfigs),\n/* harmony export */   g: () => (/* binding */ SWRConfig),\n/* harmony export */   h: () => (/* binding */ initCache),\n/* harmony export */   i: () => (/* binding */ isWindowDefined),\n/* harmony export */   j: () => (/* binding */ mutate),\n/* harmony export */   k: () => (/* binding */ compare),\n/* harmony export */   l: () => (/* binding */ _stableHash),\n/* harmony export */   m: () => (/* binding */ mergeObjects),\n/* harmony export */   n: () => (/* binding */ internalMutate),\n/* harmony export */   o: () => (/* binding */ getTimestamp),\n/* harmony export */   p: () => (/* binding */ preset),\n/* harmony export */   q: () => (/* binding */ defaultConfigOptions),\n/* harmony export */   r: () => (/* binding */ IS_SERVER),\n/* harmony export */   s: () => (/* binding */ serialize),\n/* harmony export */   t: () => (/* binding */ rAF),\n/* harmony export */   u: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   v: () => (/* binding */ slowConnection),\n/* harmony export */   w: () => (/* binding */ isDocumentDefined),\n/* harmony export */   x: () => (/* binding */ isLegacyDeno),\n/* harmony export */   y: () => (/* binding */ hasRequestAnimationFrame),\n/* harmony export */   z: () => (/* binding */ createCacheHelper)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _events_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./events.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/events.mjs\");\n/* harmony import */ var dequal_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dequal/lite */ \"(ssr)/./node_modules/dequal/lite/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ A,B,I,O,S,U,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z auto */ function _regeneratorRuntime() {\n    \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ \n    _regeneratorRuntime = function _regeneratorRuntime() {\n        return e;\n    };\n    var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t, e, r) {\n        t[e] = r.value;\n    }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\";\n    function define(t, e, r) {\n        return Object.defineProperty(t, e, {\n            value: r,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }), t[e];\n    }\n    try {\n        define({}, \"\");\n    } catch (t) {\n        define = function define(t, e, r) {\n            return t[e] = r;\n        };\n    }\n    function wrap(t, e, r, n) {\n        var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []);\n        return o(a, \"_invoke\", {\n            value: makeInvokeMethod(t, r, c)\n        }), a;\n    }\n    function tryCatch(t, e, r) {\n        try {\n            return {\n                type: \"normal\",\n                arg: t.call(e, r)\n            };\n        } catch (t) {\n            return {\n                type: \"throw\",\n                arg: t\n            };\n        }\n    }\n    e.wrap = wrap;\n    var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {};\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    var p = {};\n    define(p, a, function() {\n        return this;\n    });\n    var d = Object.getPrototypeOf, v = d && d(d(values([])));\n    v && v !== r && n.call(v, a) && (p = v);\n    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n    function defineIteratorMethods(t) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(e) {\n            define(t, e, function(t) {\n                return this._invoke(e, t);\n            });\n        });\n    }\n    function AsyncIterator(t, e) {\n        function invoke(r, o, i, a) {\n            var c = tryCatch(t[r], t, o);\n            if (\"throw\" !== c.type) {\n                var u = c.arg, h = u.value;\n                return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function(t) {\n                    invoke(\"next\", t, i, a);\n                }, function(t) {\n                    invoke(\"throw\", t, i, a);\n                }) : e.resolve(h).then(function(t) {\n                    u.value = t, i(u);\n                }, function(t) {\n                    return invoke(\"throw\", t, i, a);\n                });\n            }\n            a(c.arg);\n        }\n        var r;\n        o(this, \"_invoke\", {\n            value: function value(t, n) {\n                function callInvokeWithMethodAndArg() {\n                    return new e(function(e, r) {\n                        invoke(t, n, e, r);\n                    });\n                }\n                return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n            }\n        });\n    }\n    function makeInvokeMethod(e, r, n) {\n        var o = h;\n        return function(i, a) {\n            if (o === f) throw new Error(\"Generator is already running\");\n            if (o === s) {\n                if (\"throw\" === i) throw a;\n                return {\n                    value: t,\n                    done: !0\n                };\n            }\n            for(n.method = i, n.arg = a;;){\n                var c = n.delegate;\n                if (c) {\n                    var u = maybeInvokeDelegate(c, n);\n                    if (u) {\n                        if (u === y) continue;\n                        return u;\n                    }\n                }\n                if (\"next\" === n.method) n.sent = n._sent = n.arg;\n                else if (\"throw\" === n.method) {\n                    if (o === h) throw o = s, n.arg;\n                    n.dispatchException(n.arg);\n                } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n                o = f;\n                var p = tryCatch(e, r, n);\n                if (\"normal\" === p.type) {\n                    if (o = n.done ? s : l, p.arg === y) continue;\n                    return {\n                        value: p.arg,\n                        done: n.done\n                    };\n                }\n                \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n            }\n        };\n    }\n    function maybeInvokeDelegate(e, r) {\n        var n = r.method, o = e.iterator[n];\n        if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n        var i = tryCatch(o, e.iterator, r.arg);\n        if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n        var a = i.arg;\n        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n    }\n    function pushTryEntry(t) {\n        var e = {\n            tryLoc: t[0]\n        };\n        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n    }\n    function resetTryEntry(t) {\n        var e = t.completion || {};\n        e.type = \"normal\", delete e.arg, t.completion = e;\n    }\n    function Context(t) {\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ], t.forEach(pushTryEntry, this), this.reset(!0);\n    }\n    function values(e) {\n        if (e || \"\" === e) {\n            var r = e[a];\n            if (r) return r.call(e);\n            if (\"function\" == typeof e.next) return e;\n            if (!isNaN(e.length)) {\n                var o = -1, i = function next() {\n                    for(; ++o < e.length;)if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n                    return next.value = t, next.done = !0, next;\n                };\n                return i.next = i;\n            }\n        }\n        throw new TypeError(_typeof(e) + \" is not iterable\");\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: !0\n    }), o(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: !0\n    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function(t) {\n        var e = \"function\" == typeof t && t.constructor;\n        return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n    }, e.mark = function(t) {\n        return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n    }, e.awrap = function(t) {\n        return {\n            __await: t\n        };\n    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {\n        return this;\n    }), e.AsyncIterator = AsyncIterator, e.async = function(t, r, n, o, i) {\n        void 0 === i && (i = Promise);\n        var a = new AsyncIterator(wrap(t, r, n, o), i);\n        return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {\n            return t.done ? t.value : a.next();\n        });\n    }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function() {\n        return this;\n    }), define(g, \"toString\", function() {\n        return \"[object Generator]\";\n    }), e.keys = function(t) {\n        var e = Object(t), r = [];\n        for(var n in e)r.push(n);\n        return r.reverse(), function next() {\n            for(; r.length;){\n                var t = r.pop();\n                if (t in e) return next.value = t, next.done = !1, next;\n            }\n            return next.done = !0, next;\n        };\n    }, e.values = values, Context.prototype = {\n        constructor: Context,\n        reset: function reset(e) {\n            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for(var r in this)\"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n        },\n        stop: function stop() {\n            this.done = !0;\n            var t = this.tryEntries[0].completion;\n            if (\"throw\" === t.type) throw t.arg;\n            return this.rval;\n        },\n        dispatchException: function dispatchException(e) {\n            if (this.done) throw e;\n            var r = this;\n            function handle(n, o) {\n                return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n            }\n            for(var o = this.tryEntries.length - 1; o >= 0; --o){\n                var i = this.tryEntries[o], a = i.completion;\n                if (\"root\" === i.tryLoc) return handle(\"end\");\n                if (i.tryLoc <= this.prev) {\n                    var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\");\n                    if (c && u) {\n                        if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                        if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                    } else if (c) {\n                        if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                    } else {\n                        if (!u) throw new Error(\"try statement without catch or finally\");\n                        if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                    }\n                }\n            }\n        },\n        abrupt: function abrupt(t, e) {\n            for(var r = this.tryEntries.length - 1; r >= 0; --r){\n                var o = this.tryEntries[r];\n                if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n                    var i = o;\n                    break;\n                }\n            }\n            i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n            var a = i ? i.completion : {};\n            return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n        },\n        complete: function complete(t, e) {\n            if (\"throw\" === t.type) throw t.arg;\n            return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n        },\n        finish: function finish(t) {\n            for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                var r = this.tryEntries[e];\n                if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n            }\n        },\n        \"catch\": function _catch(t) {\n            for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                var r = this.tryEntries[e];\n                if (r.tryLoc === t) {\n                    var n = r.completion;\n                    if (\"throw\" === n.type) {\n                        var o = n.arg;\n                        resetTryEntry(r);\n                    }\n                    return o;\n                }\n            }\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function delegateYield(e, r, n) {\n            return this.delegate = {\n                iterator: values(e),\n                resultName: r,\n                nextLoc: n\n            }, \"next\" === this.method && (this.arg = t), y;\n        }\n    }, e;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\n// Global state used to deduplicate requests and store listeners\nvar SWRGlobalState = new WeakMap();\n// Shared state between server components and client components\nvar noop = function noop() {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nvar UNDEFINED = /*#__NOINLINE__*/ noop();\nvar OBJECT = Object;\nvar isUndefined = function isUndefined(v) {\n    return v === UNDEFINED;\n};\nvar isFunction = function isFunction(v) {\n    return typeof v == \"function\";\n};\nvar mergeObjects = function mergeObjects(a, b) {\n    return _objectSpread(_objectSpread({}, a), b);\n};\nvar isPromiseLike = function isPromiseLike(x) {\n    return isFunction(x.then);\n};\nvar EMPTY_CACHE = {};\nvar INITIAL_CACHE = {};\nvar STR_UNDEFINED = \"undefined\";\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nvar isWindowDefined = false;\nvar isDocumentDefined = (typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) != STR_UNDEFINED;\nvar isLegacyDeno = isWindowDefined && \"Deno\" in window;\nvar hasRequestAnimationFrame = function hasRequestAnimationFrame() {\n    return isWindowDefined && _typeof(window[\"requestAnimationFrame\"]) != STR_UNDEFINED;\n};\nvar createCacheHelper = function createCacheHelper(cache, key) {\n    var state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        function() {\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        },\n        // Setter\n        function(info) {\n            if (!isUndefined(key)) {\n                var prev = cache.get(key);\n                // Before writing to the store, we keep the value in the initial cache\n                // if it's not there yet.\n                if (!(key in INITIAL_CACHE)) {\n                    INITIAL_CACHE[key] = prev;\n                }\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n            }\n        },\n        // Subscriber\n        state[6],\n        // Get server cache snapshot\n        function() {\n            if (!isUndefined(key)) {\n                // If the cache was updated on the client, we return the stored initial value.\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n            }\n            // If we haven't done any client-side updates, we return the current value.\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        }\n    ];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ var online = true;\nvar isOnline = function isOnline() {\n    return online;\n};\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nvar _ref = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n], _ref2 = _slicedToArray(_ref, 2), onWindowEvent = _ref2[0], offWindowEvent = _ref2[1];\nvar isVisible = function isVisible() {\n    var visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== \"hidden\";\n};\nvar initFocus = function initFocus(callback) {\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener(\"visibilitychange\", callback);\n    }\n    onWindowEvent(\"focus\", callback);\n    return function() {\n        if (isDocumentDefined) {\n            document.removeEventListener(\"visibilitychange\", callback);\n        }\n        offWindowEvent(\"focus\", callback);\n    };\n};\nvar initReconnect = function initReconnect(callback) {\n    // revalidate on reconnected\n    var onOnline = function onOnline() {\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    var onOffline = function onOffline() {\n        online = false;\n    };\n    onWindowEvent(\"online\", onOnline);\n    onWindowEvent(\"offline\", onOffline);\n    return function() {\n        offWindowEvent(\"online\", onOnline);\n        offWindowEvent(\"offline\", onOffline);\n    };\n};\nvar preset = {\n    isOnline: isOnline,\n    isVisible: isVisible\n};\nvar defaultConfigOptions = {\n    initFocus: initFocus,\n    initReconnect: initReconnect\n};\nvar IS_REACT_LEGACY = !react__WEBPACK_IMPORTED_MODULE_0__.useId;\nvar IS_SERVER = !isWindowDefined || isLegacyDeno;\n// Polyfill requestAnimationFrame\nvar rAF = function rAF(f) {\n    return hasRequestAnimationFrame() ? window[\"requestAnimationFrame\"](f) : setTimeout(f, 1);\n};\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nvar useIsomorphicLayoutEffect = IS_SERVER ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nvar navigatorConnection = typeof navigator !== \"undefined\" && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nvar slowConnection = !IS_SERVER && navigatorConnection && ([\n    \"slow-2g\",\n    \"2g\"\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\nvar getTypeName = function getTypeName(value) {\n    return OBJECT.prototype.toString.call(value);\n};\nvar isObjectTypeName = function isObjectTypeName(typeName, type) {\n    return typeName === \"[object \".concat(type, \"]\");\n};\n// counter of the key\nvar counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nvar _stableHash = function stableHash(arg) {\n    var type = _typeof(arg);\n    var typeName = getTypeName(arg);\n    var isDate = isObjectTypeName(typeName, \"Date\");\n    var isRegex = isObjectTypeName(typeName, \"RegExp\");\n    var isPlainObject = isObjectTypeName(typeName, \"Object\");\n    var result;\n    var index;\n    if (OBJECT(arg) === arg && !isDate && !isRegex) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + \"~\";\n        table.set(arg, result);\n        if (Array.isArray(arg)) {\n            // Array.\n            result = \"@\";\n            for(index = 0; index < arg.length; index++){\n                result += _stableHash(arg[index]) + \",\";\n            }\n            table.set(arg, result);\n        }\n        if (isPlainObject) {\n            // Object, sort keys.\n            result = \"#\";\n            var keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + \":\" + _stableHash(arg[index]) + \",\";\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == \"symbol\" ? arg.toString() : type == \"string\" ? JSON.stringify(arg) : \"\" + arg;\n    }\n    return result;\n};\nvar serialize = function serialize(key) {\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = \"\";\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    var args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == \"string\" ? key : (Array.isArray(key) ? key.length : key) ? _stableHash(key) : \"\";\n    return [\n        key,\n        args\n    ];\n};\n// Global timestamp.\nvar __timestamp = 0;\nvar getTimestamp = function getTimestamp() {\n    return ++__timestamp;\n};\nfunction internalMutate() {\n    return _internalMutate.apply(this, arguments);\n}\nfunction _internalMutate() {\n    _internalMutate = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2() {\n        var _len, args, _key2, cache, _key, _data, _opts, options, populateCache, rollbackOnErrorOption, optimisticData, rollbackOnError, throwOnError, keyFilter, matchedKeys, it, _iterator2, _step2, key, mutateByKey, _mutateByKey, _args2 = arguments;\n        return _regeneratorRuntime().wrap(function(_context2) {\n            while(1)switch(_context2.prev = _context2.next){\n                case 0:\n                    _mutateByKey = function _mutateByKey3() {\n                        _mutateByKey = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(_k) {\n                            var _serialize, _serialize2, key, _createCacheHelper, _createCacheHelper2, get, set, _SWRGlobalState$get, _SWRGlobalState$get2, EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD, startRevalidate, data, error, isError, beforeMutationTs, hasOptimisticData, state, displayedData, currentData, committedData, populateCachedData;\n                            return _regeneratorRuntime().wrap(function(_context) {\n                                while(1)switch(_context.prev = _context.next){\n                                    case 0:\n                                        // Serialize key\n                                        _serialize = serialize(_k), _serialize2 = _slicedToArray(_serialize, 1), key = _serialize2[0];\n                                        if (key) {\n                                            _context.next = 1;\n                                            break;\n                                        }\n                                        return _context.abrupt(\"return\");\n                                    case 1:\n                                        _createCacheHelper = createCacheHelper(cache, key), _createCacheHelper2 = _slicedToArray(_createCacheHelper, 2), get = _createCacheHelper2[0], set = _createCacheHelper2[1];\n                                        _SWRGlobalState$get = SWRGlobalState.get(cache), _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 4), EVENT_REVALIDATORS = _SWRGlobalState$get2[0], MUTATION = _SWRGlobalState$get2[1], FETCH = _SWRGlobalState$get2[2], PRELOAD = _SWRGlobalState$get2[3];\n                                        startRevalidate = function startRevalidate() {\n                                            var revalidators = EVENT_REVALIDATORS[key];\n                                            var revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n                                            if (revalidate) {\n                                                // Invalidate the key by deleting the concurrent request markers so new\n                                                // requests will not be deduped.\n                                                delete FETCH[key];\n                                                delete PRELOAD[key];\n                                                if (revalidators && revalidators[0]) {\n                                                    return revalidators[0](_events_mjs__WEBPACK_IMPORTED_MODULE_2__.MUTATE_EVENT).then(function() {\n                                                        return get().data;\n                                                    });\n                                                }\n                                            }\n                                            return get().data;\n                                        }; // If there is no new data provided, revalidate the key with current state.\n                                        if (!(args.length < 3)) {\n                                            _context.next = 2;\n                                            break;\n                                        }\n                                        return _context.abrupt(\"return\", startRevalidate());\n                                    case 2:\n                                        data = _data;\n                                        isError = false; // Update global timestamps.\n                                        beforeMutationTs = getTimestamp();\n                                        MUTATION[key] = [\n                                            beforeMutationTs,\n                                            0\n                                        ];\n                                        hasOptimisticData = !isUndefined(optimisticData);\n                                        state = get(); // `displayedData` is the current value on screen. It could be the optimistic value\n                                        // that is going to be overridden by a `committedData`, or get reverted back.\n                                        // `committedData` is the validated value that comes from a fetch or mutation.\n                                        displayedData = state.data;\n                                        currentData = state._c;\n                                        committedData = isUndefined(currentData) ? displayedData : currentData; // Do optimistic data update.\n                                        if (hasOptimisticData) {\n                                            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n                                            // When we set optimistic data, backup the current committedData data in `_c`.\n                                            set({\n                                                data: optimisticData,\n                                                _c: committedData\n                                            });\n                                        }\n                                        if (isFunction(data)) {\n                                            // `data` is a function, call it passing current cache value.\n                                            try {\n                                                data = data(committedData);\n                                            } catch (err) {\n                                                // If it throws an error synchronously, we shouldn't update the cache.\n                                                error = err;\n                                                isError = true;\n                                            }\n                                        }\n                                        // `data` is a promise/thenable, resolve the final data first.\n                                        if (!(data && isPromiseLike(data))) {\n                                            _context.next = 6;\n                                            break;\n                                        }\n                                        _context.next = 3;\n                                        return data[\"catch\"](function(err) {\n                                            error = err;\n                                            isError = true;\n                                        });\n                                    case 3:\n                                        data = _context.sent;\n                                        if (!(beforeMutationTs !== MUTATION[key][0])) {\n                                            _context.next = 5;\n                                            break;\n                                        }\n                                        if (!isError) {\n                                            _context.next = 4;\n                                            break;\n                                        }\n                                        throw error;\n                                    case 4:\n                                        return _context.abrupt(\"return\", data);\n                                    case 5:\n                                        if (isError && hasOptimisticData && rollbackOnError(error)) {\n                                            // Rollback. Always populate the cache in this case but without\n                                            // transforming the data.\n                                            populateCache = true;\n                                            // Reset data to be the latest committed data, and clear the `_c` value.\n                                            set({\n                                                data: committedData,\n                                                _c: UNDEFINED\n                                            });\n                                        }\n                                    case 6:\n                                        // If we should write back the cache after request.\n                                        if (populateCache) {\n                                            if (!isError) {\n                                                // Transform the result into data.\n                                                if (isFunction(populateCache)) {\n                                                    populateCachedData = populateCache(data, committedData);\n                                                    set({\n                                                        data: populateCachedData,\n                                                        error: UNDEFINED,\n                                                        _c: UNDEFINED\n                                                    });\n                                                } else {\n                                                    // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                                                    set({\n                                                        data: data,\n                                                        error: UNDEFINED,\n                                                        _c: UNDEFINED\n                                                    });\n                                                }\n                                            }\n                                        }\n                                        // Reset the timestamp to mark the mutation has ended.\n                                        MUTATION[key][1] = getTimestamp();\n                                        // Update existing SWR Hooks' internal states:\n                                        Promise.resolve(startRevalidate()).then(function() {\n                                            // The mutation and revalidation are ended, we can clear it since the data is\n                                            // not an optimistic value anymore.\n                                            set({\n                                                _c: UNDEFINED\n                                            });\n                                        });\n                                        // Throw error or return data\n                                        if (!isError) {\n                                            _context.next = 8;\n                                            break;\n                                        }\n                                        if (!throwOnError) {\n                                            _context.next = 7;\n                                            break;\n                                        }\n                                        throw error;\n                                    case 7:\n                                        return _context.abrupt(\"return\");\n                                    case 8:\n                                        return _context.abrupt(\"return\", data);\n                                    case 9:\n                                    case \"end\":\n                                        return _context.stop();\n                                }\n                            }, _callee);\n                        }));\n                        return _mutateByKey.apply(this, arguments);\n                    };\n                    mutateByKey = function _mutateByKey2(_x) {\n                        return _mutateByKey.apply(this, arguments);\n                    };\n                    for(_len = _args2.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++){\n                        args[_key2] = _args2[_key2];\n                    }\n                    cache = args[0], _key = args[1], _data = args[2], _opts = args[3]; // When passing as a boolean, it's explicitly used to disable/enable\n                    // revalidation.\n                    options = mergeObjects({\n                        populateCache: true,\n                        throwOnError: true\n                    }, typeof _opts === \"boolean\" ? {\n                        revalidate: _opts\n                    } : _opts || {});\n                    populateCache = options.populateCache;\n                    rollbackOnErrorOption = options.rollbackOnError;\n                    optimisticData = options.optimisticData;\n                    rollbackOnError = function rollbackOnError(error) {\n                        return typeof rollbackOnErrorOption === \"function\" ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n                    };\n                    throwOnError = options.throwOnError; // If the second argument is a key filter, return the mutation results for all\n                    // filtered keys.\n                    if (!isFunction(_key)) {\n                        _context2.next = 1;\n                        break;\n                    }\n                    keyFilter = _key;\n                    matchedKeys = [];\n                    it = cache.keys();\n                    _iterator2 = _createForOfIteratorHelper(it);\n                    try {\n                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                            key = _step2.value;\n                            if (// Skip the special useSWRInfinite and useSWRSubscription keys.\n                            !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                                matchedKeys.push(key);\n                            }\n                        }\n                    } catch (err) {\n                        _iterator2.e(err);\n                    } finally{\n                        _iterator2.f();\n                    }\n                    return _context2.abrupt(\"return\", Promise.all(matchedKeys.map(mutateByKey)));\n                case 1:\n                    return _context2.abrupt(\"return\", mutateByKey(_key));\n                case 2:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }, _callee2);\n    }));\n    return _internalMutate.apply(this, arguments);\n}\nvar revalidateAllKeys = function revalidateAllKeys(revalidators, type) {\n    for(var key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nvar initCache = function initCache(provider, options) {\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        var opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        var EVENT_REVALIDATORS = Object.create(null);\n        var _mutate = internalMutate.bind(UNDEFINED, provider);\n        var unmount = noop;\n        var subscriptions = Object.create(null);\n        var subscribe = function subscribe(key, callback) {\n            var subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return function() {\n                return subs.splice(subs.indexOf(callback), 1);\n            };\n        };\n        var setter = function setter(key, value, prev) {\n            provider.set(key, value);\n            var subs = subscriptions[key];\n            if (subs) {\n                var _iterator = _createForOfIteratorHelper(subs), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var fn = _step.value;\n                        fn(value, prev);\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n            }\n        };\n        var initProvider = function initProvider() {\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    Object.create(null),\n                    Object.create(null),\n                    Object.create(null),\n                    _mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    var releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, _events_mjs__WEBPACK_IMPORTED_MODULE_2__.FOCUS_EVENT)));\n                    var releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, _events_mjs__WEBPACK_IMPORTED_MODULE_2__.RECONNECT_EVENT)));\n                    unmount = function unmount() {\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState[\"delete\"](provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            _mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n// error retry\nvar onErrorRetry = function onErrorRetry(_, __, config, revalidate, opts) {\n    var maxRetryCount = config.errorRetryCount;\n    var currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    var timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nvar compare = dequal_lite__WEBPACK_IMPORTED_MODULE_1__.dequal;\n// Default cache provider\nvar _initCache = initCache(new Map()), _initCache2 = _slicedToArray(_initCache, 2), cache = _initCache2[0], mutate = _initCache2[1];\n// Default config\nvar defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry: onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare: compare,\n    isPaused: function isPaused() {\n        return false;\n    },\n    cache: cache,\n    mutate: mutate,\n    fallback: {}\n}, // use web preset by default\npreset);\nvar mergeConfigs = function mergeConfigs(a, b) {\n    // Need to create a new object to avoid mutating the original here.\n    var v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        var u1 = a.use, f1 = a.fallback;\n        var u2 = b.use, f2 = b.fallback;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\nvar SWRConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar SWRConfig = function SWRConfig(props) {\n    var value = props.value;\n    var parentConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext);\n    var isFunctionalConfig = isFunction(value);\n    var config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return isFunctionalConfig ? value(parentConfig) : value;\n    }, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    var extendedConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return isFunctionalConfig ? config : mergeConfigs(parentConfig, config);\n    }, [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    var provider = config && config.provider;\n    // initialize the cache only on first access.\n    var cacheContextRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(UNDEFINED);\n    if (provider && !cacheContextRef.current) {\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n    }\n    var cacheContext = cacheContextRef.current;\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(function() {\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swr/dist/_internal/constants.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/swr/dist/_internal/constants.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INFINITE_PREFIX: () => (/* binding */ INFINITE_PREFIX)\n/* harmony export */ });\nvar INFINITE_PREFIX = '$inf$';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dyL2Rpc3QvX2ludGVybmFsL2NvbnN0YW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLGVBQWUsR0FBRyxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29kZXgtYm9vc3Rlci1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd3IvZGlzdC9faW50ZXJuYWwvY29uc3RhbnRzLm1qcz9kMmNkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IElORklOSVRFX1BSRUZJWCA9ICckaW5mJCc7XG5cbmV4cG9ydCB7IElORklOSVRFX1BSRUZJWCB9O1xuIl0sIm5hbWVzIjpbIklORklOSVRFX1BSRUZJWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/_internal/constants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swr/dist/_internal/events.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swr/dist/_internal/events.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_REVALIDATE_EVENT: () => (/* binding */ ERROR_REVALIDATE_EVENT),\n/* harmony export */   FOCUS_EVENT: () => (/* binding */ FOCUS_EVENT),\n/* harmony export */   MUTATE_EVENT: () => (/* binding */ MUTATE_EVENT),\n/* harmony export */   RECONNECT_EVENT: () => (/* binding */ RECONNECT_EVENT)\n/* harmony export */ });\nvar FOCUS_EVENT = 0;\nvar RECONNECT_EVENT = 1;\nvar MUTATE_EVENT = 2;\nvar ERROR_REVALIDATE_EVENT = 3;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dyL2Rpc3QvX2ludGVybmFsL2V2ZW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQU1BLFdBQVcsR0FBRyxDQUFDO0FBQ3JCLElBQU1DLGVBQWUsR0FBRyxDQUFDO0FBQ3pCLElBQU1DLFlBQVksR0FBRyxDQUFDO0FBQ3RCLElBQU1DLHNCQUFzQixHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2RleC1ib29zdGVyLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3ci9kaXN0L19pbnRlcm5hbC9ldmVudHMubWpzP2QzZTYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRk9DVVNfRVZFTlQgPSAwO1xuY29uc3QgUkVDT05ORUNUX0VWRU5UID0gMTtcbmNvbnN0IE1VVEFURV9FVkVOVCA9IDI7XG5jb25zdCBFUlJPUl9SRVZBTElEQVRFX0VWRU5UID0gMztcblxuZXhwb3J0IHsgRVJST1JfUkVWQUxJREFURV9FVkVOVCwgRk9DVVNfRVZFTlQsIE1VVEFURV9FVkVOVCwgUkVDT05ORUNUX0VWRU5UIH07XG4iXSwibmFtZXMiOlsiRk9DVVNfRVZFTlQiLCJSRUNPTk5FQ1RfRVZFTlQiLCJNVVRBVEVfRVZFTlQiLCJFUlJPUl9SRVZBTElEQVRFX0VWRU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/_internal/events.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swr/dist/_internal/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swr/dist/_internal/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INFINITE_PREFIX: () => (/* reexport safe */ _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.INFINITE_PREFIX),\n/* harmony export */   IS_REACT_LEGACY: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   IS_SERVER: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   OBJECT: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.O),\n/* harmony export */   SWRConfig: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   SWRGlobalState: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   UNDEFINED: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.U),\n/* harmony export */   cache: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   compare: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   createCacheHelper: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   defaultConfig: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   defaultConfigOptions: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   getTimestamp: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   hasRequestAnimationFrame: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   initCache: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   internalMutate: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   isDocumentDefined: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   isFunction: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   isLegacyDeno: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   isPromiseLike: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   isUndefined: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   isWindowDefined: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   mergeConfigs: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   mergeObjects: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mutate: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   noop: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   preload: () => (/* binding */ preload),\n/* harmony export */   preset: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   rAF: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   revalidateEvents: () => (/* reexport module object */ _events_mjs__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   serialize: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   slowConnection: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   stableHash: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   subscribeCallback: () => (/* binding */ subscribeCallback),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* reexport safe */ _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   useSWRConfig: () => (/* binding */ useSWRConfig),\n/* harmony export */   withArgs: () => (/* binding */ withArgs),\n/* harmony export */   withMiddleware: () => (/* binding */ withMiddleware)\n/* harmony export */ });\n/* harmony import */ var _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-context-client-BoS53ST9.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs\");\n/* harmony import */ var _events_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/events.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/constants.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n// @ts-expect-error\nvar enableDevtools = _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.i && window.__SWR_DEVTOOLS_USE__;\nvar use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nvar setupDevTools = function setupDevTools() {\n  if (enableDevtools) {\n    // @ts-expect-error\n    window.__SWR_DEVTOOLS_REACT__ = react__WEBPACK_IMPORTED_MODULE_3__;\n  }\n};\nvar normalize = function normalize(args) {\n  return (0,_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(args[1]) ? [args[0], args[1], args[2] || {}] : [args[0], null, (args[1] === null ? args[2] : args[1]) || {}];\n};\nvar useSWRConfig = function useSWRConfig() {\n  return (0,_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.d, (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.S));\n};\nvar preload = function preload(key_, fetcher) {\n  var _serialize = (0,_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(key_),\n    _serialize2 = _slicedToArray(_serialize, 2),\n    key = _serialize2[0],\n    fnArg = _serialize2[1];\n  var _SWRGlobalState$get = _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.b.get(_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n    _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 4),\n    PRELOAD = _SWRGlobalState$get2[3];\n  // Prevent preload to be called multiple times before used.\n  if (PRELOAD[key]) return PRELOAD[key];\n  var req = fetcher(fnArg);\n  PRELOAD[key] = req;\n  return req;\n};\nvar middleware = function middleware(useSWRNext) {\n  return function (key_, fetcher_, config) {\n    // fetcher might be a sync function, so this should not be an async function\n    var fetcher = fetcher_ && function () {\n      var _serialize3 = (0,_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(key_),\n        _serialize4 = _slicedToArray(_serialize3, 1),\n        key = _serialize4[0];\n      var _SWRGlobalState$get3 = _config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.b.get(_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n        _SWRGlobalState$get4 = _slicedToArray(_SWRGlobalState$get3, 4),\n        PRELOAD = _SWRGlobalState$get4[3];\n      if (key.startsWith(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.INFINITE_PREFIX)) {\n        // we want the infinite fetcher to be called.\n        // handling of the PRELOAD cache happens there.\n        return fetcher_.apply(void 0, arguments);\n      }\n      var req = PRELOAD[key];\n      if ((0,_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(req)) return fetcher_.apply(void 0, arguments);\n      delete PRELOAD[key];\n      return req;\n    };\n    return useSWRNext(key_, fetcher, config);\n  };\n};\nvar BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nvar withArgs = function withArgs(hook) {\n  return function useSWRArgs() {\n    // Get the default and inherited configuration.\n    var fallbackConfig = useSWRConfig();\n    // Normalize arguments.\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var _normalize = normalize(args),\n      _normalize2 = _slicedToArray(_normalize, 3),\n      key = _normalize2[0],\n      fn = _normalize2[1],\n      _config = _normalize2[2];\n    // Merge configurations.\n    var config = (0,_config_context_client_BoS53ST9_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(fallbackConfig, _config);\n    // Apply middleware\n    var next = hook;\n    var use = config.use;\n    var middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n    for (var i = middleware.length; i--;) {\n      next = middleware[i](next);\n    }\n    return next(key, fn || config.fetcher || null, config);\n  };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nvar subscribeCallback = function subscribeCallback(key, callbacks, callback) {\n  var keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n  keyedRevalidators.push(callback);\n  return function () {\n    var index = keyedRevalidators.indexOf(callback);\n    if (index >= 0) {\n      // O(1): faster than splice\n      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n      keyedRevalidators.pop();\n    }\n  };\n};\n\n// Create a custom hook with a middleware\nvar withMiddleware = function withMiddleware(useSWR, middleware) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    var _normalize3 = normalize(args),\n      _normalize4 = _slicedToArray(_normalize3, 3),\n      key = _normalize4[0],\n      fn = _normalize4[1],\n      config = _normalize4[2];\n    var uses = (config.use || []).concat(middleware);\n    return useSWR(key, fn, _objectSpread(_objectSpread({}, config), {}, {\n      use: uses\n    }));\n  };\n};\nsetupDevTools();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/_internal/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swr/dist/index/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/swr/dist/index/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SWRConfig: () => (/* binding */ SWRConfig),\n/* harmony export */   \"default\": () => (/* binding */ useSWR),\n/* harmony export */   mutate: () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.j),\n/* harmony export */   preload: () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.preload),\n/* harmony export */   unstable_serialize: () => (/* binding */ unstable_serialize),\n/* harmony export */   useSWRConfig: () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.useSWRConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_internal/index.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs\");\n/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_internal/index.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/events.mjs\");\n/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_internal/index.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/index.mjs\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n\n\n\n\n\n// Shared state between server components and client components\nvar noop = function noop() {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nvar UNDEFINED = /*#__NOINLINE__*/noop();\nvar OBJECT = Object;\nvar isUndefined = function isUndefined(v) {\n  return v === UNDEFINED;\n};\nvar isFunction = function isFunction(v) {\n  return typeof v == 'function';\n};\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\nvar getTypeName = function getTypeName(value) {\n  return OBJECT.prototype.toString.call(value);\n};\nvar isObjectTypeName = function isObjectTypeName(typeName, type) {\n  return typeName === \"[object \".concat(type, \"]\");\n};\n// counter of the key\nvar counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nvar _stableHash = function stableHash(arg) {\n  var type = _typeof(arg);\n  var typeName = getTypeName(arg);\n  var isDate = isObjectTypeName(typeName, 'Date');\n  var isRegex = isObjectTypeName(typeName, 'RegExp');\n  var isPlainObject = isObjectTypeName(typeName, 'Object');\n  var result;\n  var index;\n  if (OBJECT(arg) === arg && !isDate && !isRegex) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (Array.isArray(arg)) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += _stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (isPlainObject) {\n      // Object, sort keys.\n      result = '#';\n      var keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + _stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\nvar serialize = function serialize(key) {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  var args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? _stableHash(key) : '';\n  return [key, args];\n};\nvar unstable_serialize = function unstable_serialize(key) {\n  return serialize(key)[0];\n};\n\n/// <reference types=\"react/experimental\" />\nvar use = react__WEBPACK_IMPORTED_MODULE_0__.use ||\n// This extra generic is to avoid TypeScript mixing up the generic and JSX sytax\n// and emitting an error.\n// We assume that this is only for the `use(thenable)` case, not `use(context)`.\n// https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45\nfunction (thenable) {\n  switch (thenable.status) {\n    case 'pending':\n      throw thenable;\n    case 'fulfilled':\n      return thenable.value;\n    case 'rejected':\n      throw thenable.reason;\n    default:\n      thenable.status = 'pending';\n      thenable.then(function (v) {\n        thenable.status = 'fulfilled';\n        thenable.value = v;\n      }, function (e) {\n        thenable.status = 'rejected';\n        thenable.reason = e;\n      });\n      throw thenable;\n  }\n};\nvar WITH_DEDUPE = {\n  dedupe: true\n};\nvar useSWRHandler = function useSWRHandler(_key, fetcher, config) {\n  var cache = config.cache,\n    compare = config.compare,\n    suspense = config.suspense,\n    fallbackData = config.fallbackData,\n    revalidateOnMount = config.revalidateOnMount,\n    revalidateIfStale = config.revalidateIfStale,\n    refreshInterval = config.refreshInterval,\n    refreshWhenHidden = config.refreshWhenHidden,\n    refreshWhenOffline = config.refreshWhenOffline,\n    keepPreviousData = config.keepPreviousData;\n  var _SWRGlobalState$get = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.b.get(cache),\n    _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 4),\n    EVENT_REVALIDATORS = _SWRGlobalState$get2[0],\n    MUTATION = _SWRGlobalState$get2[1],\n    FETCH = _SWRGlobalState$get2[2],\n    PRELOAD = _SWRGlobalState$get2[3];\n  // `key` is the identifier of the SWR internal state,\n  // `fnArg` is the argument/arguments parsed from the key, which will be passed\n  // to the fetcher.\n  // All of them are derived from `_key`.\n  var _serialize$ = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(_key),\n    _serialize$2 = _slicedToArray(_serialize$, 2),\n    key = _serialize$2[0],\n    fnArg = _serialize$2[1];\n  // If it's the initial render of this hook.\n  var initialMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  // If the hook is unmounted already. This will be used to prevent some effects\n  // to be called after unmounting.\n  var unmountedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  // Refs to keep the key and config.\n  var keyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(key);\n  var fetcherRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(fetcher);\n  var configRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(config);\n  var getConfig = function getConfig() {\n    return configRef.current;\n  };\n  var isActive = function isActive() {\n    return getConfig().isVisible() && getConfig().isOnline();\n  };\n  var _createCacheHelper = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(cache, key),\n    _createCacheHelper2 = _slicedToArray(_createCacheHelper, 4),\n    getCache = _createCacheHelper2[0],\n    setCache = _createCacheHelper2[1],\n    subscribeCache = _createCacheHelper2[2],\n    getInitialCache = _createCacheHelper2[3];\n  var stateDependencies = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({}).current;\n  // Resolve the fallback data from either the inline option, or the global provider.\n  // If it's a promise, we simply let React suspend and resolve it for us.\n  var fallback = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(fallbackData) ? (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(config.fallback) ? _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.U : config.fallback[key] : fallbackData;\n  var isEqual = function isEqual(prev, current) {\n    for (var _ in stateDependencies) {\n      var t = _;\n      if (t === 'data') {\n        if (!compare(prev[t], current[t])) {\n          if (!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(prev[t])) {\n            return false;\n          }\n          if (!compare(returnedData, current[t])) {\n            return false;\n          }\n        }\n      } else {\n        if (current[t] !== prev[t]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  var getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    var shouldStartRequest = function () {\n      if (!key) return false;\n      if (!fetcher) return false;\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(revalidateOnMount)) return revalidateOnMount;\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false;\n      if (suspense) return false;\n      return revalidateIfStale !== false;\n    }();\n    // Get the cache and merge it with expected states.\n    var getSelectedCache = function getSelectedCache(state) {\n      // We only select the needed fields from the state.\n      var snapshot = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(state);\n      delete snapshot._k;\n      if (!shouldStartRequest) {\n        return snapshot;\n      }\n      return _objectSpread({\n        isValidating: true,\n        isLoading: true\n      }, snapshot);\n    };\n    var cachedData = getCache();\n    var initialData = getInitialCache();\n    var clientSnapshot = getSelectedCache(cachedData);\n    var serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n    // To make sure that we are returning the same object reference to avoid\n    // unnecessary re-renders, we keep the previous snapshot and use deep\n    // comparison to check if we need to return a new one.\n    var memorizedSnapshot = clientSnapshot;\n    return [function () {\n      var newSnapshot = getSelectedCache(getCache());\n      var compareResult = isEqual(newSnapshot, memorizedSnapshot);\n      if (compareResult) {\n        // Mentally, we should always return the `memorizedSnapshot` here\n        // as there's no change between the new and old snapshots.\n        // However, since the `isEqual` function only compares selected fields,\n        // the values of the unselected fields might be changed. That's\n        // simply because we didn't track them.\n        // To support the case in https://github.com/vercel/swr/pull/2576,\n        // we need to update these fields in the `memorizedSnapshot` too\n        // with direct mutations to ensure the snapshot is always up-to-date\n        // even for the unselected fields, but only trigger re-renders when\n        // the selected fields are changed.\n        memorizedSnapshot.data = newSnapshot.data;\n        memorizedSnapshot.isLoading = newSnapshot.isLoading;\n        memorizedSnapshot.isValidating = newSnapshot.isValidating;\n        memorizedSnapshot.error = newSnapshot.error;\n        return memorizedSnapshot;\n      } else {\n        memorizedSnapshot = newSnapshot;\n        return newSnapshot;\n      }\n    }, function () {\n      return serverSnapshot;\n    }];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cache, key]);\n  // Get the current state that SWR should return.\n  var cached = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (callback) {\n    return subscribeCache(key, function (current, prev) {\n      if (!isEqual(prev, current)) callback();\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cache, key]), getSnapshot[0], getSnapshot[1]);\n  var isInitialMount = !initialMountedRef.current;\n  var hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n  var cachedData = cached.data;\n  var data = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(cachedData) ? fallback && (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(fallback) ? use(fallback) : fallback : cachedData;\n  var error = cached.error;\n  // Use a ref to store previously returned data. Use the initial data as its initial value.\n  var laggyDataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(data);\n  var returnedData = keepPreviousData ? (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(cachedData) ? (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(laggyDataRef.current) ? data : laggyDataRef.current : cachedData : data;\n  // - Suspense mode and there's stale data for the initial render.\n  // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n  // - `revalidateIfStale` is enabled but `data` is not defined.\n  var shouldDoInitialRevalidation = function () {\n    // if a key already has revalidators and also has error, we should not trigger revalidation\n    if (hasRevalidator && !(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(error)) return false;\n    // If `revalidateOnMount` is set, we take the value directly.\n    if (isInitialMount && !(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(revalidateOnMount)) return revalidateOnMount;\n    // If it's paused, we skip revalidation.\n    if (getConfig().isPaused()) return false;\n    // Under suspense mode, it will always fetch on render if there is no\n    // stale data so no need to revalidate immediately mount it again.\n    // If data exists, only revalidate if `revalidateIfStale` is true.\n    if (suspense) return (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(data) ? false : revalidateIfStale;\n    // If there is no stale data, we need to revalidate when mount;\n    // If `revalidateIfStale` is set to true, we will always revalidate.\n    return (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(data) || revalidateIfStale;\n  }();\n  // Resolve the default validating state:\n  // If it's able to validate, and it should revalidate when mount, this will be true.\n  var defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n  var isValidating = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n  var isLoading = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n  // The revalidation function is a carefully crafted wrapper of the original\n  // `fetcher`, to correctly handle the many edge cases.\n  var revalidate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(revalidateOpts) {\n      var currentFetcher, newData, startAt, loading, opts, shouldStartNewRequest, callbackSafeguard, finalState, finishRequestAndUpdateState, cleanupState, initialState, _FETCH$key, mutationInfo, cacheData, currentConfig, shouldRetryOnError, _t;\n      return _regeneratorRuntime().wrap(function (_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            currentFetcher = fetcherRef.current;\n            if (!(!key || !currentFetcher || unmountedRef.current || getConfig().isPaused())) {\n              _context.next = 1;\n              break;\n            }\n            return _context.abrupt(\"return\", false);\n          case 1:\n            loading = true;\n            opts = revalidateOpts || {}; // If there is no ongoing concurrent request, or `dedupe` is not set, a\n            // new request should be initiated.\n            shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n            /*\n             For React 17\n             Do unmount check for calls:\n             If key has changed during the revalidation, or the component has been\n             unmounted, old dispatch and old event callbacks should not take any\n             effect\n             For React 18\n            only check if key has changed\n            https://github.com/reactwg/react-18/discussions/82\n            */\n            callbackSafeguard = function callbackSafeguard() {\n              if (_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.I) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n              }\n              return key === keyRef.current;\n            }; // The final state object when the request finishes.\n            finalState = {\n              isValidating: false,\n              isLoading: false\n            };\n            finishRequestAndUpdateState = function finishRequestAndUpdateState() {\n              setCache(finalState);\n            };\n            cleanupState = function cleanupState() {\n              // Check if it's still the same request before deleting it.\n              var requestInfo = FETCH[key];\n              if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n              }\n            }; // Start fetching. Change the `isValidating` state, update the cache.\n            initialState = {\n              isValidating: true\n            }; // It is in the `isLoading` state, if and only if there is no cached data.\n            // This bypasses fallback data and laggy data.\n            if ((0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(getCache().data)) {\n              initialState.isLoading = true;\n            }\n            _context.prev = 2;\n            if (shouldStartNewRequest) {\n              setCache(initialState);\n              // If no cache is being rendered currently (it shows a blank page),\n              // we trigger the loading slow event.\n              if (config.loadingTimeout && (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(getCache().data)) {\n                setTimeout(function () {\n                  if (loading && callbackSafeguard()) {\n                    getConfig().onLoadingSlow(key, config);\n                  }\n                }, config.loadingTimeout);\n              }\n              // Start the request and save the timestamp.\n              // Key must be truthy if entering here.\n              FETCH[key] = [currentFetcher(fnArg), (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.o)()];\n            }\n            // Wait until the ongoing request is done. Deduplication is also\n            // considered here.\n            ;\n            _FETCH$key = _slicedToArray(FETCH[key], 2);\n            newData = _FETCH$key[0];\n            startAt = _FETCH$key[1];\n            _context.next = 3;\n            return newData;\n          case 3:\n            newData = _context.sent;\n            if (shouldStartNewRequest) {\n              // If the request isn't interrupted, clean it up after the\n              // deduplication interval.\n              setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!(!FETCH[key] || FETCH[key][1] !== startAt)) {\n              _context.next = 4;\n              break;\n            }\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return _context.abrupt(\"return\", false);\n          case 4:\n            // Clear error.\n            finalState.error = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.U;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            mutationInfo = MUTATION[key];\n            if (!(!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(mutationInfo) && (\n            // case 1\n            startAt <= mutationInfo[0] ||\n            // case 2\n            startAt <= mutationInfo[1] ||\n            // case 3\n            mutationInfo[1] === 0))) {\n              _context.next = 5;\n              break;\n            }\n            finishRequestAndUpdateState();\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return _context.abrupt(\"return\", false);\n          case 5:\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            cacheData = getCache().data; // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onSuccess(newData, key, config);\n              }\n            }\n            _context.next = 7;\n            break;\n          case 6:\n            _context.prev = 6;\n            _t = _context[\"catch\"](2);\n            cleanupState();\n            currentConfig = getConfig();\n            shouldRetryOnError = currentConfig.shouldRetryOnError; // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n              // Get a new error, don't use deep comparison for errors.\n              finalState.error = _t;\n              // Error event and retry logic. Only for the actual request, not\n              // deduped ones.\n              if (shouldStartNewRequest && callbackSafeguard()) {\n                currentConfig.onError(_t, key, currentConfig);\n                if (shouldRetryOnError === true || (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(shouldRetryOnError) && shouldRetryOnError(_t)) {\n                  if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n                    // If it's inactive, stop. It will auto-revalidate when\n                    // refocusing or reconnecting.\n                    // When retrying, deduplication is always enabled.\n                    currentConfig.onErrorRetry(_t, key, currentConfig, function (_opts) {\n                      var revalidators = EVENT_REVALIDATORS[key];\n                      if (revalidators && revalidators[0]) {\n                        revalidators[0](_internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__.ERROR_REVALIDATE_EVENT, _opts);\n                      }\n                    }, {\n                      retryCount: (opts.retryCount || 0) + 1,\n                      dedupe: true\n                    });\n                  }\n                }\n              }\n            }\n          case 7:\n            // Mark loading as stopped.\n            loading = false;\n            // Update the current hook's state.\n            finishRequestAndUpdateState();\n            return _context.abrupt(\"return\", true);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 6]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n  // `keyValidating` are depending on `key`, so we can exclude them from\n  // the deps array.\n  //\n  // FIXME:\n  // `fn` and `config` might be changed during the lifecycle,\n  // but they might be changed every render like this.\n  // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n  // So we omit the values from the deps array\n  // even though it might cause unexpected behaviors.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [key, cache]);\n  // Similar to the global mutate but bound to the current cache and key.\n  // `cache` isn't allowed to change during the lifecycle.\n  var boundMutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n  // Use callback to make sure `keyRef.current` returns latest result every time\n  function () {\n    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.n.apply(void 0, [cache, keyRef.current].concat(args));\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  // The logic for updating refs.\n  (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(function () {\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    // Handle laggy data updates. If there's cached data of the current key,\n    // it'll be the correct reference.\n    if (!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(cachedData)) {\n      laggyDataRef.current = cachedData;\n    }\n  });\n  // After mounted or key changed.\n  (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(function () {\n    if (!key) return;\n    var softRevalidate = revalidate.bind(_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.U, WITH_DEDUPE);\n    var nextFocusRevalidatedAt = 0;\n    if (getConfig().revalidateOnFocus) {\n      var initNow = Date.now();\n      nextFocusRevalidatedAt = initNow + getConfig().focusThrottleInterval;\n    }\n    // Expose revalidators to global event listeners. So we can trigger\n    // revalidation from the outside.\n    var onRevalidate = function onRevalidate(type) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (type == _internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__.FOCUS_EVENT) {\n        var now = Date.now();\n        if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n          nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n          softRevalidate();\n        }\n      } else if (type == _internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__.RECONNECT_EVENT) {\n        if (getConfig().revalidateOnReconnect && isActive()) {\n          softRevalidate();\n        }\n      } else if (type == _internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__.MUTATE_EVENT) {\n        return revalidate();\n      } else if (type == _internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__.ERROR_REVALIDATE_EVENT) {\n        return revalidate(opts);\n      }\n      return;\n    };\n    var unsubEvents = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.subscribeCallback)(key, EVENT_REVALIDATORS, onRevalidate);\n    // Mark the component as mounted and update corresponding refs.\n    unmountedRef.current = false;\n    keyRef.current = key;\n    initialMountedRef.current = true;\n    // Keep the original key in the cache.\n    setCache({\n      _k: fnArg\n    });\n    // Trigger a revalidation\n    if (shouldDoInitialRevalidation) {\n      // Performance optimization: if a request is already in progress for this key,\n      // skip the revalidation to avoid redundant work\n      if (!FETCH[key]) {\n        if ((0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(data) || _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.r) {\n          // Revalidate immediately.\n          softRevalidate();\n        } else {\n          // Delay the revalidate if we have data to return so we won't block\n          // rendering.\n          (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(softRevalidate);\n        }\n      }\n    }\n    return function () {\n      // Mark it as unmounted.\n      unmountedRef.current = true;\n      unsubEvents();\n    };\n  }, [key]);\n  // Polling\n  (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(function () {\n    var timer;\n    function next() {\n      // Use the passed interval\n      // ...or invoke the function with the updated data to get the interval\n      var interval = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n      // We only start the next interval if `refreshInterval` is not 0, and:\n      // - `force` is true, which is the start of polling\n      // - or `timer` is not 0, which means the effect wasn't canceled\n      if (interval && timer !== -1) {\n        timer = setTimeout(execute, interval);\n      }\n    }\n    function execute() {\n      // Check if it's OK to execute:\n      // Only revalidate when the page is visible, online, and not errored.\n      if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n        revalidate(WITH_DEDUPE).then(next);\n      } else {\n        // Schedule the next interval to check again.\n        next();\n      }\n    }\n    next();\n    return function () {\n      if (timer) {\n        clearTimeout(timer);\n        timer = -1;\n      }\n    };\n  }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]);\n  // Display debug info in React DevTools.\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(returnedData);\n  // In Suspense mode, we can't return the empty `data` state.\n  // If there is an `error`, the `error` needs to be thrown to the error boundary.\n  // If there is no `error`, the `revalidation` promise needs to be thrown to\n  // the suspense boundary.\n  if (suspense && (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(data) && key) {\n    // SWR should throw when trying to use Suspense on the server with React 18,\n    // without providing any fallback data. This causes hydration errors. See:\n    // https://github.com/vercel/swr/issues/1832\n    if (!_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.I && _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.r) {\n      throw new Error('Fallback data is required when using Suspense in SSR.');\n    }\n    // Always update fetcher and config refs even with the Suspense mode.\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    unmountedRef.current = false;\n    var req = PRELOAD[key];\n    if (!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(req)) {\n      var promise = boundMutate(req);\n      use(promise);\n    }\n    if ((0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(error)) {\n      var _promise = revalidate(WITH_DEDUPE);\n      if (!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(returnedData)) {\n        _promise.status = 'fulfilled';\n        _promise.value = true;\n      }\n      use(_promise);\n    } else {\n      throw error;\n    }\n  }\n  var swrResponse = {\n    mutate: boundMutate,\n    get data() {\n      stateDependencies.data = true;\n      return returnedData;\n    },\n    get error() {\n      stateDependencies.error = true;\n      return error;\n    },\n    get isValidating() {\n      stateDependencies.isValidating = true;\n      return isValidating;\n    },\n    get isLoading() {\n      stateDependencies.isLoading = true;\n      return isLoading;\n    }\n  };\n  return swrResponse;\n};\nvar SWRConfig = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.O.defineProperty(_internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.g, 'defaultValue', {\n  value: _internal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.d\n});\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (isLoading) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */\nvar useSWR = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.withArgs)(useSWRHandler);\n\n// useSWR\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/index/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swr/dist/infinite/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swr/dist/infinite/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useSWRInfinite),\n/* harmony export */   infinite: () => (/* binding */ infinite),\n/* harmony export */   unstable_serialize: () => (/* binding */ unstable_serialize)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _index_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../index/index.mjs */ \"(ssr)/./node_modules/swr/dist/index/index.mjs\");\n/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_internal/index.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs\");\n/* harmony import */ var _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_internal/constants.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/constants.mjs\");\n/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_internal/index.mjs */ \"(ssr)/./node_modules/swr/dist/_internal/index.mjs\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n\n\n\n\n\n\n// Shared state between server components and client components\nvar noop = function noop() {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nvar UNDEFINED = /*#__NOINLINE__*/noop();\nvar OBJECT = Object;\nvar isUndefined = function isUndefined(v) {\n  return v === UNDEFINED;\n};\nvar isFunction = function isFunction(v) {\n  return typeof v == 'function';\n};\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\nvar getTypeName = function getTypeName(value) {\n  return OBJECT.prototype.toString.call(value);\n};\nvar isObjectTypeName = function isObjectTypeName(typeName, type) {\n  return typeName === \"[object \".concat(type, \"]\");\n};\n// counter of the key\nvar counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nvar _stableHash = function stableHash(arg) {\n  var type = _typeof(arg);\n  var typeName = getTypeName(arg);\n  var isDate = isObjectTypeName(typeName, 'Date');\n  var isRegex = isObjectTypeName(typeName, 'RegExp');\n  var isPlainObject = isObjectTypeName(typeName, 'Object');\n  var result;\n  var index;\n  if (OBJECT(arg) === arg && !isDate && !isRegex) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (Array.isArray(arg)) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += _stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (isPlainObject) {\n      // Object, sort keys.\n      result = '#';\n      var keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + _stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\nvar serialize = function serialize(key) {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  var args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? _stableHash(key) : '';\n  return [key, args];\n};\nvar getFirstPageKey = function getFirstPageKey(getKey) {\n  return serialize(getKey ? getKey(0, null) : null)[0];\n};\nvar unstable_serialize = function unstable_serialize(getKey) {\n  return _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.INFINITE_PREFIX + getFirstPageKey(getKey);\n};\n\n// We have to several type castings here because `useSWRInfinite` is a special\n// hook where `key` and return type are not like the normal `useSWR` types.\nvar EMPTY_PROMISE = Promise.resolve();\nvar infinite = function infinite(useSWRNext) {\n  return function (getKey, fn, config) {\n    var didMountRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    var cache$1 = config.cache,\n      _config$initialSize = config.initialSize,\n      initialSize = _config$initialSize === void 0 ? 1 : _config$initialSize,\n      _config$revalidateAll = config.revalidateAll,\n      revalidateAll = _config$revalidateAll === void 0 ? false : _config$revalidateAll,\n      _config$persistSize = config.persistSize,\n      persistSize = _config$persistSize === void 0 ? false : _config$persistSize,\n      _config$revalidateFir = config.revalidateFirstPage,\n      revalidateFirstPage = _config$revalidateFir === void 0 ? true : _config$revalidateFir,\n      _config$revalidateOnM = config.revalidateOnMount,\n      revalidateOnMount = _config$revalidateOnM === void 0 ? false : _config$revalidateOnM,\n      _config$parallel = config.parallel,\n      parallel = _config$parallel === void 0 ? false : _config$parallel;\n    var _SWRGlobalState$get = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.b.get(_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.c),\n      _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 4),\n      PRELOAD = _SWRGlobalState$get2[3];\n    // The serialized key of the first page. This key will be used to store\n    // metadata of this SWR infinite hook.\n    var infiniteKey;\n    try {\n      infiniteKey = getFirstPageKey(getKey);\n      if (infiniteKey) infiniteKey = _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.INFINITE_PREFIX + infiniteKey;\n    } catch (err) {\n      // Not ready yet.\n    }\n    var _createCacheHelper = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.z)(cache$1, infiniteKey),\n      _createCacheHelper2 = _slicedToArray(_createCacheHelper, 3),\n      get = _createCacheHelper2[0],\n      set = _createCacheHelper2[1],\n      subscribeCache = _createCacheHelper2[2];\n    var getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n      var size = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(get()._l) ? initialSize : get()._l;\n      return size;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cache$1, infiniteKey, initialSize]);\n    (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (callback) {\n      if (infiniteKey) return subscribeCache(infiniteKey, function () {\n        callback();\n      });\n      return function () {};\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cache$1, infiniteKey]), getSnapshot, getSnapshot);\n    var resolvePageSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n      var cachedPageSize = get()._l;\n      return (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(cachedPageSize) ? initialSize : cachedPageSize;\n      // `cache` isn't allowed to change during the lifecycle\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [infiniteKey, initialSize]);\n    // keep the last page size to restore it with the persistSize option\n    var lastPageSizeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(resolvePageSize());\n    // When the page key changes, we reset the page size if it's not persisted\n    (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.u)(function () {\n      if (!didMountRef.current) {\n        didMountRef.current = true;\n        return;\n      }\n      if (infiniteKey) {\n        // If the key has been changed, we keep the current page size if persistSize is enabled\n        // Otherwise, we reset the page size to cached pageSize\n        set({\n          _l: persistSize ? lastPageSizeRef.current : resolvePageSize()\n        });\n      }\n      // `initialSize` isn't allowed to change during the lifecycle\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [infiniteKey, cache$1]);\n    // Needs to check didMountRef during mounting, not in the fetcher\n    var shouldRevalidateOnMount = revalidateOnMount && !didMountRef.current;\n    // Actual SWR hook to load all pages in one fetcher.\n    var swr = useSWRNext(infiniteKey, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {\n        var forceRevalidateAll, shouldRevalidatePage, data, pageSize, _createCacheHelper3, _createCacheHelper4, getCache, cacheData, revalidators, previousPageData, _loop, i;\n        return _regeneratorRuntime().wrap(function (_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // get the revalidate context\n              forceRevalidateAll = get()._i;\n              shouldRevalidatePage = get()._r;\n              set({\n                _r: _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.U\n              });\n              // return an array of page data\n              data = [];\n              pageSize = resolvePageSize();\n              _createCacheHelper3 = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.z)(cache$1, key), _createCacheHelper4 = _slicedToArray(_createCacheHelper3, 1), getCache = _createCacheHelper4[0];\n              cacheData = getCache().data;\n              revalidators = [];\n              previousPageData = null;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(i) {\n                var _serialize$, _serialize$2, pageKey, pageArg, _createCacheHelper5, _createCacheHelper6, getSWRCache, setSWRCache, pageData, shouldFetchPage, revalidate;\n                return _regeneratorRuntime().wrap(function (_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _serialize$ = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(getKey(i, parallel ? null : previousPageData)), _serialize$2 = _slicedToArray(_serialize$, 2), pageKey = _serialize$2[0], pageArg = _serialize$2[1];\n                      if (pageKey) {\n                        _context2.next = 1;\n                        break;\n                      }\n                      return _context2.abrupt(\"return\", 1);\n                    case 1:\n                      _createCacheHelper5 = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.z)(cache$1, pageKey), _createCacheHelper6 = _slicedToArray(_createCacheHelper5, 2), getSWRCache = _createCacheHelper6[0], setSWRCache = _createCacheHelper6[1]; // Get the cached page data.\n                      pageData = getSWRCache().data; // should fetch (or revalidate) if:\n                      // - `revalidateAll` is enabled\n                      // - `mutate()` called\n                      // - the cache is missing\n                      // - it's the first page and it's not the initial render\n                      // - `revalidateOnMount` is enabled and it's on mount\n                      // - cache for that page has changed\n                      shouldFetchPage = revalidateAll || forceRevalidateAll || (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(pageData) || revalidateFirstPage && !i && !(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(cacheData) || shouldRevalidateOnMount || cacheData && !(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(cacheData[i]) && !config.compare(cacheData[i], pageData);\n                      if (!(fn && (typeof shouldRevalidatePage === 'function' ? shouldRevalidatePage(pageData, pageArg) : shouldFetchPage))) {\n                        _context2.next = 4;\n                        break;\n                      }\n                      revalidate = /*#__PURE__*/function () {\n                        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                          var hasPreloadedRequest, req;\n                          return _regeneratorRuntime().wrap(function (_context) {\n                            while (1) switch (_context.prev = _context.next) {\n                              case 0:\n                                hasPreloadedRequest = pageKey in PRELOAD;\n                                if (hasPreloadedRequest) {\n                                  _context.next = 2;\n                                  break;\n                                }\n                                _context.next = 1;\n                                return fn(pageArg);\n                              case 1:\n                                pageData = _context.sent;\n                                _context.next = 4;\n                                break;\n                              case 2:\n                                req = PRELOAD[pageKey]; // delete the preload cache key before resolving it\n                                // in case there's an error\n                                delete PRELOAD[pageKey];\n                                // get the page data from the preload cache\n                                _context.next = 3;\n                                return req;\n                              case 3:\n                                pageData = _context.sent;\n                              case 4:\n                                setSWRCache({\n                                  data: pageData,\n                                  _k: pageArg\n                                });\n                                data[i] = pageData;\n                              case 5:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }, _callee);\n                        }));\n                        return function revalidate() {\n                          return _ref2.apply(this, arguments);\n                        };\n                      }();\n                      if (!parallel) {\n                        _context2.next = 2;\n                        break;\n                      }\n                      revalidators.push(revalidate);\n                      _context2.next = 3;\n                      break;\n                    case 2:\n                      _context2.next = 3;\n                      return revalidate();\n                    case 3:\n                      _context2.next = 5;\n                      break;\n                    case 4:\n                      data[i] = pageData;\n                    case 5:\n                      if (!parallel) {\n                        previousPageData = pageData;\n                      }\n                    case 6:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _loop);\n              });\n              i = 0;\n            case 1:\n              if (!(i < pageSize)) {\n                _context3.next = 4;\n                break;\n              }\n              return _context3.delegateYield(_loop(i), \"t0\", 2);\n            case 2:\n              if (!_context3.t0) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"continue\", 4);\n            case 3:\n              ++i;\n              _context3.next = 1;\n              break;\n            case 4:\n              if (!parallel) {\n                _context3.next = 5;\n                break;\n              }\n              _context3.next = 5;\n              return Promise.all(revalidators.map(function (r) {\n                return r();\n              }));\n            case 5:\n              // once we executed the data fetching based on the context, clear the context\n              set({\n                _i: _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.U\n              });\n              // return the data\n              return _context3.abrupt(\"return\", data);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), config);\n    var mutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    // eslint-disable-next-line func-names\n    function (data, opts) {\n      // When passing as a boolean, it's explicitly used to disable/enable\n      // revalidation.\n      var options = typeof opts === 'boolean' ? {\n        revalidate: opts\n      } : opts || {};\n      // Default to true.\n      var shouldRevalidate = options.revalidate !== false;\n      // It is possible that the key is still falsy.\n      if (!infiniteKey) return EMPTY_PROMISE;\n      if (shouldRevalidate) {\n        if (!(0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(data)) {\n          // We only revalidate the pages that are changed\n          set({\n            _i: false,\n            _r: options.revalidate\n          });\n        } else {\n          // Calling `mutate()`, we revalidate all pages\n          set({\n            _i: true,\n            _r: options.revalidate\n          });\n        }\n      }\n      return arguments.length ? swr.mutate(data, _objectSpread(_objectSpread({}, options), {}, {\n        revalidate: shouldRevalidate\n      })) : swr.mutate();\n    },\n    // swr.mutate is always the same reference\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [infiniteKey, cache$1]);\n    // Extend the SWR API\n    var setSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg) {\n      // It is possible that the key is still falsy.\n      if (!infiniteKey) return EMPTY_PROMISE;\n      var _createCacheHelper7 = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.z)(cache$1, infiniteKey),\n        _createCacheHelper8 = _slicedToArray(_createCacheHelper7, 2),\n        changeSize = _createCacheHelper8[1];\n      var size;\n      if ((0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(arg)) {\n        size = arg(resolvePageSize());\n      } else if (typeof arg == 'number') {\n        size = arg;\n      }\n      if (typeof size != 'number') return EMPTY_PROMISE;\n      changeSize({\n        _l: size\n      });\n      lastPageSizeRef.current = size;\n      // Calculate the page data after the size change.\n      var data = [];\n      var _createCacheHelper9 = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.z)(cache$1, infiniteKey),\n        _createCacheHelper10 = _slicedToArray(_createCacheHelper9, 1),\n        getInfiniteCache = _createCacheHelper10[0];\n      var previousPageData = null;\n      for (var i = 0; i < size; ++i) {\n        var _serialize$3 = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(getKey(i, previousPageData)),\n          _serialize$4 = _slicedToArray(_serialize$3, 1),\n          pageKey = _serialize$4[0];\n        var _createCacheHelper11 = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.z)(cache$1, pageKey),\n          _createCacheHelper12 = _slicedToArray(_createCacheHelper11, 1),\n          getCache = _createCacheHelper12[0];\n        // Get the cached page data.\n        var pageData = pageKey ? getCache().data : _internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.U;\n        // Call `mutate` with infinte cache data if we can't get it from the page cache.\n        if ((0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(pageData)) {\n          return mutate(getInfiniteCache().data);\n        }\n        data.push(pageData);\n        previousPageData = pageData;\n      }\n      return mutate(data);\n    },\n    // exclude getKey from the dependencies, which isn't allowed to change during the lifecycle\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [infiniteKey, cache$1, mutate, resolvePageSize]);\n    // Use getter functions to avoid unnecessary re-renders caused by triggering\n    // all the getters of the returned swr object.\n    return {\n      size: resolvePageSize(),\n      setSize: setSize,\n      mutate: mutate,\n      get data() {\n        return swr.data;\n      },\n      get error() {\n        return swr.error;\n      },\n      get isValidating() {\n        return swr.isValidating;\n      },\n      get isLoading() {\n        return swr.isLoading;\n      }\n    };\n  };\n};\nvar useSWRInfinite = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_4__.withMiddleware)(_index_index_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"], infinite);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/infinite/index.mjs\n");

/***/ })

};
;