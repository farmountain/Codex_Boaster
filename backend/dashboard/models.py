# backend/dashboard/models.py

from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List

class AgentConfidenceScore(BaseModel):
    """Represents the confidence score of an agent's output."""
    score: float = Field(..., ge=0.0, le=1.0, description="Confidence score between 0.0 and 1.0.")
    rationale: str = Field(..., description="Reasoning or explanation for the confidence score.")

class AgentLogEntry(BaseModel):
    """Represents a log entry for an agent's activity in HipCortex."""
    session_id: str = Field(..., description="Unique identifier for the user session or interaction.")
    agent_name: str = Field(..., description="Name of the agent that performed the action (e.g., 'BuilderAgent', 'ArchitectAgent').")
    prompt_input: str = Field(..., description="The input prompt or request given to the agent.")
    output_content: str = Field(..., description="The primary output content generated by the agent (e.g., code, plan, test results).")
    confidence_score: AgentConfidenceScore = Field(..., description="Confidence score associated with the agent's output.")
    timestamp: Optional[str] = Field(default_factory=lambda: datetime.utcnow().isoformat(), description="UTC timestamp of when the log entry was created.")
    context_info: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional context or metadata related to the agent's operation.")

# You can add other models here if your dashboard or other parts of the system need them.
